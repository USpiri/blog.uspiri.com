---
import { cn } from "@utils/cn";
import MoonIcon from "./icons/MoonIcon.astro";
import SunIcon from "./icons/SunIcon.astro";

interface Props {
  iconClass?: string;
}

const { iconClass } = Astro.props;
---

<button
  id="toggle-theme"
  title="Toggle theme"
  class="transition-colors hover:text-neutral-400 dark:hover:text-neutral-500 sm:hover:animate-spin"
>
  <SunIcon id="sun-icon" class={cn("hidden h-5 w-5" + iconClass)} />
  <MoonIcon id="moon-icon" class={cn("hidden h-5 w-5", iconClass)} />
</button>

<script>
  const moon = document.getElementById("moon-icon");
  const sun = document.getElementById("sun-icon");
  type ThemeType = "dark" | "light";

  const theme = () => localStorage.getItem("theme") as ThemeType;
  const systemTheme = () =>
    window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  let selected = () => theme() ?? systemTheme();

  const updateTheme = (value?: ThemeType) => {
    const themeToApply = value ?? selected();

    document.documentElement.classList.remove("light", "dark");
    document.documentElement.classList.add(themeToApply);

    if (value) localStorage.setItem("theme", themeToApply);

    if (themeToApply === "dark") {
      moon?.classList.add("hidden");
      sun?.classList.remove("hidden");
    } else {
      moon?.classList.remove("hidden");
      sun?.classList.add("hidden");
    }
  };

  updateTheme();

  document.getElementById("toggle-theme")?.addEventListener("click", () => {
    const theme = selected() === "dark" ? "light" : "dark";
    updateTheme(theme);
  });

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (!theme()) {
        updateTheme();
      }
    });
</script>
